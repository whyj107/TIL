Hash Table
 - 해시 테이블이란?
   → (Key, Value)로 데이터를 저장하는 자료구조 중 하나로 빠르게 데이터를 검색할 수 있는 자료 구조입니다.
 - search의 평균 시간복잡도
   → key값으로 데이터를 찾기 때문에 시간복잡도는 O(1)입니다. 그러나 데이터 충돌이 발생할 경우는 연결된 리스트들까지 검색해야 하므로 O(N)까지 시간복잡도가 증가할 수 있습니다.
 - hash function의 조건
   → 압축 : n 길이 평문을 고정된 길이의 출력값으로 변환합니다.
   → 일방향 : 역방향 계산 불가능해야합니다.
   → 효율성 : 해시값 계산에 시간이 많이 소요되지 않아야 합니다.
   → 충돌회피 : 해시 값이 충돌하지 않도록 해야합니다.
   → 2차 선이미지 회피성
 - 해시 충돌이 발생할 때 해결 방법
   → 분리 연결법 : 동일한 버킷의 데이터에 대해 자료구조를 활용해 추가 메모리를 사용하여 다음 데이터의 주소를 저장하는 것입니다.
   → 개방 주소법 : 비어있는 해시 테이블의 공간을 활용하는 방법입니다.

==================================================================

Stack
 - queue 구현 : stack 2개로 구현
 - 괄호 유효성 체크 구현

==================================================================

Queue
 - stack과의 차이점
   → Stack의 경우 후입선출이고 Queue의 경우 선입선출입니다.

==================================================================

Graph : 노드와 그 노드를 연결하는 간선을 하나로 모아 놓은 자료 구조
 - 인접 행렬 방식과 인접 리스트 방식의 차이점
   → 인접리스트 : 그래프 내에 적은 숫자의 간선만을 가지는 희소 그래프의 경우
	장점: 어떤 노드에 인접한 노드들을 쉽게 찾을 수 있다. 그래프에 존재하는 모든 간선의 수는 O(N+E) 안에 일 수 있다.
	단점: 간선의 존재 여부와 정점의 차수: 정점 i의 리스트에 있는 노드의 수 즉, 정점 ㅏ수만큼의 시간이 필요하다.
   → 인접행렬 : 그래프에 간선이 많이 존재하는 밀집 그래프의 경우
	장점 : 두 정점을 연결하는 간선의 존재 여부를 O(1) 안에 즉시 알 수 있다. 정점의 차수는 O(N) 안에 알 수 있다.: 인접 배열의 i번째 행 또는 열을 모두 더한다.
	단점 : 어떤 노드에 인접한 노드들을 찾기 위해서는 모든 노드를 전부 순회해야한다. 그래프에 존재하는 모든 간선의 수는 O(N^2) 안에 알 수 있다.
 - 어떤 경우에 각각의 방식이 적합한가?

==================================================================

Tree : Graph의 한 종류이면서 DAG(방향성이 있는 비순환 그래프)의 한 종류
 - 스택&큐와 대표적인 차이점
 - 선형구조와 비선형 구조
 - 그래프와 트리의 차이점
   → https://gmlwjd9405.github.io/2018/08/13/data-structure-graph.html

https://velog.io/@hinyc/34.-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Stack-Queue-Graph-Tree
==================================================================
https://velog.io/@adam2/TREE
Binary Tree
 - 이진트리란? : 트리를 구성하는 노드들의 최대 차수가 2인 노드들로 구성되는 트리입니다.
 - 언제 사용하는가?
 - heap이란?
 - heap을 왜 사용하는가?
 - heap 생성 알고리즘과 정렬 알고리즘의 시간복잡도
 - 포화이진트리, 완전 이진트리,정이진트리란?
	완전 이진 트리 : 트리를 구성하고 있는 임의의 두 단말 노드의 레벨 차이가 1이하이고, 마지막 레벨을 제외한 모든 레벨에 존재할 수 있는 모든 노드를 갖고 잇으며, 왼쪽에서 오른쪽으로 채워지는 이진트리, heap
	전이진트리 : 모든 노드가 0개 또는 2개의 자식 노드를 갖는 트리
	포화이진트리 : 모든 레벨에 노드가 차 있는 상태로 최대 노드 수인 2^k-1개로 채워져 있는 트리. 전 이진 트리이면서 완전 이진 트리인 경우

==================================================================
