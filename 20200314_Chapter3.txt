IT 서비스의 핵심 - 프론트엔드와 백엔드에 대해
=========================================
프론트엔드(웹, 앱)의 큰그림을 그려보자

[큰그림을 그려보자]
웹에 접근하는 방식 : 브라우저에서 프론트엔드 개발자가 만든 웹 프로그램을 다운받아서 보는 것
정적인 데이터 : 기초 레이아웃. 웹의 뼈대와 텍스트들이 보여진다. 고정적으로 보여지는 것
스타일시트(HTML, CSS) : 화면에 보게 될 것을 그려주는 역할 

[데이터 통신과 렌더링]
초기 화면을 그려준 후에는 서버에게 다른 정보를 요청. 이 때 정보를 달라는 요청작업은 전부 Javascript코드를 통해 동작
렌더링 : 화면을 시각적으로 그려주는 작업
1. 기초 레이아웃 먼저 렌더링
2. 서버로부터 필요한 데이터 받음
3. 그 데이터를 활용해서 추가 렌더링 작업 수행

항상 기초는 데이터를 받기 전 뼈대 레이아웃이 있고 데이터 및 내부 작업을 실행 한 후에 추가적으로 화면이 바뀌게 된다는 것.

[라우터에 대해]
라우터 : 다른 페이지로 넘어갈 때 도움을 줌

[인증에 대해]
우리가 로그인 과정을 거친다는 건 백엔드의 인증 서버에게 아이디 비밀번호를 보내서 확인시키고, 본인이 맞다면 본인에게 신분증 역할을 하는 토큰을 받게됩니다.
여기서 쓰이는 토큰은 프론트엔드와 백엔드가 통신을 할 때 어떤 유저인지 신분증이 되는거죠.
브라우저는 받은 토큰을 저장하고 있다가 서버에게 정보를 요청할 때 토큰을 넣어서 내가 누구인지를 알려주게 돼요.
그러면 서버는 토큰을 통해 누구인지 판단한 후 해당 유저에게 맞는 정보들을 넘겨주게 됩니다.

[앱도 웹과 유사한 플로우다]
앱은 다운받게 되면 그 안에는 모든 페이지 정보들이 코드로 들어가 있으며, 웹과 유사하게 Router가 화면 전환을 돕게 될거에요. 웹에선 HTML&CSS로 화면을 그린다면 앱은 화면 구성을 위한 각자의 레이아웃 디자인 방식이 존재합니다. 이후 데이터를 받기 위해 통신을 하고 데이터를 받은 후 화면에 그리는 작업이 들어가게 되죠.
---------------------------------------------------------------------
[키워드]
브라우저 렌더링
HTML CSS Javascript
HTTP
HTTPS
레이아웃
렌더링
라우터
URL
인증
토큰 쿠키 세션
CSR(Client Side Rendering)
SSR(Server Side Rendering)
SPA(Single Page Application)

[추가 설명]
[CSR vs SSR]
일반적으로 웹은 HTML&CSS&Javascript로 구성됩니다. 웹을 다운받는 건 HTML&CSS&Javascript를 다운받는다. 이 때 다운을 받는 방식에 따라 CSR, SSR로 나뉘게 된다. 웹서버는 클라이언트에게 웹을 다운받게 해준다.
이 때 CSR은 웹서버에서 HTML&CSS만 받아온 후, 먼저 화면을 그리게 된다. 그리고 Javascript를 나중에 다운받게 되서 데이터 요청을 나중에 하는 방식이다.
SSR은 웹서버에서 HTML&CSS&Javascript를 통해 먼저 화면을 그립니다. CSR과 다르게 웹서버에서 먼저 브라우저처럼 데이터를 포함한 화면을 렌더링한다. 그리고 클라이언트에게 넘겨주게 되고 그러면 클라이언트는 추가적으로 데이터 요청할 필요없이 이미 완성된 페이지를 받게 된다.
============================================
프론트엔드(웹, 앱)의 큰그림을 그려보자2
[웹서버에 대해]
웹서버 : 웹을 제공해주는 서버
보통 웹서버에서 제공해주는건 이미 개발한 HTML&CSS&Javascript가 합쳐져 있는 하나의 정적인 웹
백엔드의 API 서버 : 필요한 데이터를 제공
보통 브라우저가 웹서버를 통해서 웹을 다운받고 난 후, 이어지는 동작으로 데이터들을 백엔드 서버에게 요청하게 된다. 그래서 데이터를 받기까지 하면 하나의 완전한 웹이 된다.

[CDN에 대해]
네트워크는 물리적인 신호로 통신을 하기 때문에, 거리가 멀 수록 시간이 더 걸린다.
CDN : Contents Delivery Network의 약자로 컨텐츠들 즉 웹이나 이미지, 비디오 등을 미리 캐시로 저장한 후 사용자에게 가까운 거리에서 보여주게 하는 기술. 멀리있는 웹서버에서 미리 웹을 저장해두고 다른 컨텐츠들 같은걸 저장해두고 클라이언트에게 바로 제공해주는 것

[반응형 웹]
반응형 웹 : 여러가지 디바이스의 크기에 맞춰서 다르게 보여지는 웹
---------------------------------------------------------------------
[키워드]
웹서버
CDN
캐시
반응형 웹
웹 호스팅

[추가 설명]
보통 웹서버에 올려서 실제 사용자들이 접근할 수 있을 때를 Production(운영) 환경이라면, 노트북에서 혼자 개발해보는 걸 Development(개발) 환경이라고 이야기한다. 두 환경은 큰 차이가 없다. 똑같이 OS가 필요하고 코드들이 크게 달라지지 않는다.
다만 개발환경일 때는 개발과 테스트를 위주로 한다면, 운영환경일 때는 딱 서비스에 필요한 것들이 위주로 동작한다.

[심화1]
웹서버를 빠르게 구축해주는 클라우드 서비스들도 요새 늘고 있다. 기본적으로 AWS를 사용하지만 그 외에도 Zeit, Firebase 등에서도 빠르게 웹을 서버에 올리도록 도와준다.

[심화2]
AWS 클라우드에서는 S3라는 파일 스토리지를 제공한다. 이 곳엔 서비스에 필요한 이미지나 비디오 파일 등을 올리게 된다. 이 때 S3에 정적인 웹사이트(보통 CSR)를 업로드하면 알아서 S3가 웹서버인 것처럼 웹을 제공해준다. 그래서 CSR로 개발된 서비스는 보통 웹서버를 따로 구축하지 않고, S3라는 저장소에다 웹 사이트를 통째로 올려놓기도 한다.(이를 웹 호스팅이라고 이야기한다.)
============================================
백엔드(서버)의 큰그림을 그려보자
[백엔드의 구성]
백엔드는 영역이 정말 다양해요. 보통 백엔드를 통틀어서 서버라고 칭하기도 하죠. 서벅가 제대로 역할을 다하기 위해서는 몇가지 구성요소가 있다. 
API 서버 : 서비스에 필요한 정보를 전달
Database : 서비스 정보들을 저장하고 있음
Storage : 이미지, 동영상, 파일 등을 저장
Cache 등이 있다.

[Datadbase에 대해]
데이터베이스 : 서비스에 필요한 모든 정보들을 담는 저장 공간

[Storage에 대해]
프론트엔드에서 이미지나 동영상을 보여주는 경우는 파일 스토리지 URL에 접근해서 파일들을 다운 받는 것이다.

[API 서버에 대해]
API 서버 : 클라이언트가 필요로 하는 데이터
서버는 유저 정보를 달라는 요청, 클래스 정보를 달라는 요청 등에 제대로 응답할 수 있도록 전부 코드가 작성되어야 한다.
웹에서 페이지 전환을 위한 라우터가 있듯이, 서버에서는 각기 다른 정보를 요구하는 요청들을 라우터로 나누어준다. 보통 웹의 페이지마다 URL이 다르듯이 서버도 요청마다 url이 다르게 구분되어 있다.

[인증에 대해]
인증의 경우 인증만을 담당하는 서버를 따로 두기도 하고, 아니면 API 서버에 인증을 같이 처리할 수도 있다.
인증서버는 보통 유저가 로그인 요청을 했을 때 데이터베이스 안에 있는 유저테이블의 데이터와 일치하는지 확인하게 된다.
만일 정보가 일치한다면 인증에 성공했다는 토큰을 넘겨주는 역할을 한다. 더불어 토큰이 위조되지 않았는지 확인하기도 한다.

[데이터베이스의 보안]
클라이언트(프론트엔드)는 데이터베이스에 직접 접근할 수 없게 막는다.

[캐시에 대해]
캐시 : 요청하는 데이터들이 항상 동일할 때 이를 저장한다는 개념

[주의할 점]
기본적으로 프론트엔드가 백엔드와 통신을 할 때도 전부 URL을 통해서 이루어진다.
이유는 브라우저에서 웹 서버와 통신할 때 http 혹은 https 프로토콜을 사용하듯이 백엔드에게 정보를 요구할 때도 마찬가지로 http, https 프로토콜을 이용하기 때문
---------------------------------------------------------------------
[키워드]
API 서버
WAS
데이터베이스
스토리지
캐시
인증서버(OAuth)

[심화 키워드]
REST
Graphql
RDBMS
NOSQL

[추가 설명]
백엔드는 기본적으로 구성이 복잡하다. 물론 어떤 서비스인지에 따라 데이터베이스, 스토리지가 필요 없을 수도 있다.
그러나 대부분의 IT서비스는 위의 구성을 기본적으로 가지게 된다. 그래서 백엔드를 공부하려면 큰 그림을 미리 알아야 한다.
여기서 API 서버라고 언급한 부분은 크게 WAS라고도 이야기한다.

[심화1]
백엔드에서 프론트엔드로 데이터를 전달해줄 때 규칙이라는게 존재한다.
백엔드에서 데이터를 어떻게 주냐에 따라, 프론트엔드에서 데이터를 받게 되는 코드가 달라지기 때문이다.
대표적으로 백엔드 서버에서 데이터를 내려주는 방식으로 REST 방식을 많이 사용한다. 요새는 Graphql이라는 방식도 화제이다.

[심화2]
데이터베이스는 정말 종류가 다양하다. 이들은 크게 RDBMS, NOSQL로 나뉘게 된다.
서비스에 주로 쓰일 데이터 형식 그리고 서비스 개발을 하는 방식 등을 고려해서 데이터베이스를 선택하게 된다.
============================================
백엔드(서버)의 큰그림을 그려보자2
[WAS에 대해]
웹서버 : 웹이라는 정적인 데이터 제공
WAS : Web Application Server에서는 동적인 데이터들을 제공. API서버라는 것도 WAS라고 할 수 있음
정적(static) : 요청하는 주체랑 상관없이 동일
동적(dynamic) : 주체마다 데이터가 다를 수 있음

[사용자가 많은 서버는 어떻게 구성될까?]
많은 사용자가 서비스를 이용하면 그만큼 서버에게 많은 요청이 가게 된다. 그건 트래픽이 높아졌다고 이야기를 한다. 이렇게 트래픽이 높아지면 서버는 바빠진다. 서버는 하나의 프로그램에서 돌아가게 되는 것이며, 요청에 응답하기 위해 해당 컴퓨터의 CPU, 메모리를 사용하게 된다. 이 때 트래픽이 높아질수록 점점 자원이 남지 않는다. 그러면 결국 응답을 바로바로 못해주고 밀리게 되는 병목현상이 발생한다.
해결하기 위해 크게 두가지 방법이 있다.
Scale Up : 해당 서버의 컴퓨터 성능을 높인 것
Scale Out : 서버를 여러대로 늘리는 것
로드(Load) : 서버 입장에서 처리해야할 일
로드밸런싱 : 스케일 아웃으로 로드를 분산시키는 것
오토 스케일링 : 클라우드가 자동으로 스케일링을 해
---------------------------------------------------------------------
[키워드]
WAS
트래픽
스케일업
스케일아웃
로드밸런싱
오토 스케일링
서버 모니터링

[심화키워드]
서버리스(Serverless)
마이크로 서비스(Microservice)
모놀리틱(monolithic)

[심화 설명]
[RestFul vs Graphql]
RestFul : 프론트엔드가 백엔드에게 정보를 요청하게 될 URL들에 각각의 저이보를 명시. URL마다 어떤 정보들을 정해줄지 서버에서 미리 다 정해지게 되며, 클라이언트는 그저 정해진 URL을 이용해 정보를 받는 구조. 서버에서 주는 자원을 전부 정해 줌.
Graphql : 하나의 URL을 통해 통신하게 되며, 클라이언트에서 요구하는 정보들을 보내면 서버에서 알아서 다 건네주는 형태. ㅏㅣ클라이언트에 집중해서 원하는 정보들을 요구하는 방식.

[Serverless]
일반적으로 서버를 띄우기 위해선 컴퓨터 환경(OS)를 구축하고 그 위에 개발 프로그램을 띄운 후 네트워크 통신 설정을 해주게 된다. 하지만 서버리스에서는 전 과정들을 생략하고 짜놓은 코드들만 업로드 하면 알아서 서버 동작이 된다. 클라우드에서 직접 서버 컴퓨터를 다 관리해주기 때문에, 개발자들에겐 코드만 짜게 하는 편의성을 제공해 준다.
더불어 서버리스가 인기를 끌면서 마이크로서비스(Microservice)라는 아키텍처도 인기를 끌게 되었다. 이와 대비되는 아키텍처로 모놀리틱(Monolytic)도 있다.
============================================
내 코드가 업로드되는 클라우드에 대해
[클라우드를 알기 전에]
네트워크 : 컴퓨터와 컴퓨터 간의 연결
클라이언트(프론트엔드)가 서버(백엔드)에 정보를 요청할 때 네트워크 연결이 된다. 서버도 결국은 이 관점에서 컴퓨터라고 볼 수 있다. 
여기서 클라우드라는 개념이 나오게 되는데, 클라우드도 엄밀하게 보면 컴퓨터다. 하지만 실제로 우리 눈앞에 있는 컴퓨터가 아니라 가상으로 컴퓨터를 쓴다는 개념이다.

[클라우드는 어떻게 탄생했는가]
기술이 발전하면서 웹, 서버 호스팅이라는 개념이 생겼다. 호스팅해주는 업체는 컴퓨터를 많이 사놓고 네트워크로 접근을 가능하게 해서 특정 컴퓨터를 사용하도록 빌려주는 형식이다. 이걸 결국엔 가상으로 컴퓨터를 쓴다고 이야기한다.
클라우드 : 호스팅의 발전형. 가상 컴퓨터를 빌리는 것 뿐만 아니라 데이터베이스 서버나 스토리지 서버 등을 손쉽게 구축하고 연결할 수 있게 되었다. 

[클라우드 엔지니어의 등장]
클라우드에 대한 수요가 높아지면서 클라우드 엔지니어가 등장했다.

[DevOps의 등장]
개발(Development) 환경 : 서비스 개발을 할 땐 실제 서비스되는 컴퓨터를 사용하지 않고 본인의 컴퓨터에서 개발하고 테스트하는 것
운영(Production) 환경 : 이 소스코드들을 실제 서비스에 업로드되서 동작하게 되는 환경
DevOps : 개발자가 개인 컴퓨터에서 개발을 하고 테스트를 해보도록 환경을 구성해주고, 이후 프로덕션 환경까지 업로드되는 전반의 과정을 관리하고 보완해주는 직군
---------------------------------------------------------------------
[키워드]
클라우드
서버 호스팅
클랑우드 엔지니어
DevOps
개발(Development) 환경
운영(Production) 환경
CI/CD
Docker

[추가 설명]
CI/CD : 애플리케이션을 테스트하고 배포하는 전 과정을 자동화시켜서 간단하게 할 수 있고, 모니터링도 쉽게 가능하게 해주는 방식
============================================
프론트엔드, 백엔드 개발자 테크트리 비법 대공개
** 항상 뭔가를 학습할 때는 원리와 쓰임새를 간단하게나마 먼저 이해하는 게 중요하다.
[프론트엔드 개발자 트리]
처음으로 HTML, CSS, Javascript에 대한 이해가 필요하다. 각 언어들이 웹 개발에서 어떻게 쓰이고 있는지 맥락을 파악해야 한다. 그러면서 문법을 공부하는데, 당장 깊게 공부할 필요는 없다.
항상 프로젝트를 통해 직접 목표하는 결과물을 만들어보는게 중요하다.
그 이후에는 javascript로 OOP(Object Oriented Programming)라고 하는 객체지향프로그래밍 방법론에 대해 공부하는 것이다. 어떻게 코드를 짜야하는가에 대해 큰 도움이 될 것이다.
그리고 나서 웹 개발에 유용한 프레임워크인 React 혹은 Vue를 공부하는 것이 좋다. 더불어 자바스크립트 프레임워크, 라이브러리 등의 패키지들을 관리해주는 npm에 대해서도 같이 공부하면 좋다. npm을 이용하게 되면 우리 소스코드에서 라이브러리, 프레임워크를 바로 쓸 수 있고 버전을 관리해 준다.

그 후 서버를 본격적으로 공부한다. 서버와 통신하는 방식과 HTTP에 대해 이해하고, 로그인하고 회원가입하는 웹 인증 부분도 알아야 한다. 
하나의 서비스가 돌아가는 걸 파악하고 나면, 웹을 보여주는 방식인 SSR(Server Side Rendering), CSR(Client Side Rendering)에 대해 더 알아본다.
그 이후엔 웹을 빌드하는 도구인 모들번들러, 테스트 짜기 등을 해보면 좋다.

[백엔드 개발자 트리]
먼저 네트워크 & HTTP에 대한 기본 지식을 이해해야 한다.
서버 구축에 쓰이는 프로그래밍 언어를 접해본다. Javascript, Python, Ruby 같은 언어들이 있다.
Javascript(추천) = Node.js
Python = Django
그 다음에는 Database 공부를 시작한다. Database에 익숙해지면 우리가 개발한 서버에 Database를 연결시켜 프로젝트를 해보는 것이 좋다.
이후에 웹 인증을 공부한다. 이미지같은 파일들을 스토리지 혹은 서버에 저장하는 것도 같이 공부한다. 
=> 유저가 로그인을 해서 정보를 요청했을 때 프로필 사진, 닉네임 등의 정보 등을 제공해주는 서버를 직접 개발할 수 있다.
그 후 Cache에 대해 공부해보면 좋다.(캐시는 서버 최저기화를 위해 꼭 필요한 기술)
그리고 Web Server, Web Application Server를 공부해보면서 클라이언트의 HTTP 요청에 서버가 어떻게 응답하는 지 자세하게 알아 본다.
그 이후에는 OS관련 기술인 Docker, 개발한 서비스를 배포하는 방식인 CI&CD를 공부한다.
그 이후엔 테스트나 다른 언어, 프레임워크 등을 공부해보면서 더 영역을 확장해보면 된다.